name: Docker Build & Push
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
env:
  IMAGE_REGISTRY: amdp-registry.skala-ai.com/skala25a
  IMAGE_NAME: sk-gnavi4-be
  DOCKER_CREDENTIAL_ID: skala-image-registry-id
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          cache-disabled: false
          cache-read-only: false
          cache-write-only: false
          arguments: --no-daemon

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Download dependencies
        run: ./gradlew dependencies --no-daemon

      - name: Build JAR
        run: ./gradlew build -x test --no-daemon --build-cache
        timeout-minutes: 15

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
        timeout-minutes: 10

      - name: Build completed
        run: |
          echo "âœ… Docker image successfully built and pushed!"
          echo "ðŸ“¦ Image: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "ðŸš€ ArgoCD will automatically detect and deploy this new image"